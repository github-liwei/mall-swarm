version: '3'
services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root #设置root帐号密码
      MYSQL_DATABASE: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./config/mysql/my.cnf:/etc/my.cnf    #加载mysql的配置文件
      - ./config/mysql/db:/docker-entrypoint-initdb.d  #初始化mysql脚本
      - /d/Program Files/docker/path/mall-swarm/mysql/data/db:/var/lib/mysql #数据文件挂载
      - /d/Program Files/docker/path/mall-swarm/mysql/log:/var/log/mysql #mysql8日志文件挂载
    expose:
      - 3306
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 600M
        reservations:
          memory: 600M
  redis:
    image: redis:7
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - /d/Program Files/docker/path/mall-swarm/redis/data:/data #数据文件挂载
    ports:
      - 6379:6379
  nginx:
    image: nginx:1.22
    container_name: nginx
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件挂载
      - /d/Program Files/docker/path/mall-swarm/nginx/html:/usr/share/nginx/html #静态资源根目录挂载
      - /d/Program Files/docker/path/mall-swarm/nginx/log:/var/log/nginx #日志文件挂载
    ports:
      - 80:80
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    hostname: rabbitmq
    expose:
      - 5672
    volumes:
      - type: bind
        source: /d/Program Files/docker/path/mall-swarm/rabbitmq/data
        target: /var/lib/rabbitmq
      - type: bind
        source: /d/Program Files/docker/path/mall-swarm/rabbitmq/log
        target: /var/log/rabbitmq
      - type: bind
        source: ./config/rabbitmq/rabbitmq-enabled-plugins
        target: /etc/rabbitmq/enabled_plugins
      - type: bind
        source: ./config/rabbitmq/rabbitmq.config
        target: /etc/rabbitmq/rabbitmq.config
      - type: bind
        source: ./config/rabbitmq/rabbitmq-defs.json
        target: /etc/rabbitmq/rabbitmq-defs.json
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 200M
        reservations:
          memory: 100M
  elasticsearch:
    image: elasticsearch:7.17.18
    container_name: elasticsearch
    user: root
    environment:
      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch
      - "discovery.type=single-node" #以单一节点模式启动
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m" #设置使用jvm内存大小
    volumes:
      - /d/Program Files/docker/path/mall-swarm/elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载
      - /d/Program Files/docker/path/mall-swarm/elasticsearch/data:/usr/share/elasticsearch/data #数据文件挂载
    ports:
      - 9200:9200
      - 9400:9300
  logstash:
    image: logstash:7.17.3
    container_name: logstash
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./config/logstash:/usr/share/logstash/pipeline/ #挂载logstash的配置文件
    depends_on:
      - elasticsearch #kibana在elasticsearch启动之后再启动
    links:
      - elasticsearch:es #可以用es这个域名访问elasticsearch服务
    ports:
      - 4560:4560
      - 4561:4561
      - 4562:4562
      - 4563:4563
  kibana:
    image: kibana:7.17.3
    container_name: kibana
    links:
      - elasticsearch:es #可以用es这个域名访问elasticsearch服务
    depends_on:
      - elasticsearch #kibana在elasticsearch启动之后再启动
    environment:
      - "elasticsearch.hosts=http://es:9200" #设置访问elasticsearch的地址
    ports:
      - 5601:5601
  mongo:
    image: mongo:4
    container_name: mongo
    volumes:
      - /d/Program Files/docker/path/mall-swarm/mongo/db:/data/db #数据文件挂载
    ports:
      - 27017:27017
  nacos-registry:
    image: nacos/nacos-server:v2.1.0
    container_name: nacos-registry
    environment:
      - "MODE=standalone"
    ports:
      - 7999:8848
